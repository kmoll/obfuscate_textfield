<?php

/**
 * Implements hook_element_info().
 *
 * The obfuscate_textfield element may be used anywhere in Drupal.
 */
function obfuscate_textfield_element_info() {
  $types['obfuscate_textfield'] = array(
    '#input' => TRUE,
    '#tree' => TRUE,
    '#process' => array('obfuscate_textfield_element_process'),
    '#value_callback' => 'obfuscate_textfield_element_value',
    '#element_validate' => array('obfuscate_textfield_element_validate'),
    '#pre_render' => array('obfuscate_textfield_element_pre_render'),
    '#theme' => 'obfuscate_textfield_element',
    '#theme_wrappers' => array('form_element'),
    '#progress_indicator' => 'throbber',
    '#progress_message' => NULL,
    '#size' => 22,
    '#extended' => FALSE,
  );
  return $types;
}

/**
 * Implements hook_theme().
 */
function obfuscate_textfield_theme() {
  return array(
    'obfuscate_textfield_element' => array(
      'render element' => 'element',
    ),
  );
}

function theme_obfuscate_textfield_element($variables) {
  $element = $variables['element'];

  $attributes = array();
  if (isset($element['#id'])) {
    $attributes['id'] = $element['#id'];
  }
  if (!empty($element['#attributes']['class'])) {
    $attributes['class'] = (array) $element['#attributes']['class'];
  }
  $attributes['class'][] = 'form-obfuscate-textfield';

  // This wrapper is required to apply JS behaviors and CSS styling.
  $output = '';
  $output .= '<div' . drupal_attributes($attributes) . '>';
  $output .= drupal_render_children($element);
  $output .= '</div>';

  return $output;
}

function obfuscate_textfield_element_process($element, &$form_state, $form) {
  // Append the '-text' to the #id so the field label's 'for' attribute
  $original_id = $element['#id'];
  $element['#id'] .= '-text';
  $value = isset($element['#value']) ? $element['#value'] : '';

  // Set some default element properties.
  $element['#progress_indicator'] = empty($element['#progress_indicator']) ? 'none' : $element['#progress_indicator'];

  $ajax_settings = array(
    'path' => 'file/ajax/' . implode('/', $element['#array_parents']) . '/' . $form['form_build_id']['#value'],
    'wrapper' => $original_id . '-ajax-wrapper',
    'effect' => 'fade',
    'progress' => array(
      'type' => $element['#progress_indicator'],
      'message' => $element['#progress_message'],
    ),
  );

  // Force the progress indicator for the remove button to be either 'none' or
  // 'throbber'.
  $ajax_settings['progress']['type'] = ($element['#progress_indicator'] == 'none') ? 'none' : 'throbber';
  $ajax_settings['progress']['message'] = NULL;
  $ajax_settings['effect'] = 'none';
  $element['change_button'] = array(
    '#name' => implode('_', $element['#parents']) . '_change_button',
    '#type' => 'submit',
    '#value' => t('Change'),
    '#validate' => array(),
    '#submit' => array('obfuscate_textfield_element_submit'),
    '#limit_validation_errors' => array($element['#parents']),
    '#ajax' => $ajax_settings,
    '#weight' => -5,
  );

  // The text field itself.
  $element['text'] = array(
    '#type' => 'textfield',
    '#title' => t('Choose a file'),
    '#title_display' => 'invisible',
    '#size' => $element['#size'],
    '#theme_wrappers' => array(),
    '#weight' => -10,
    '#default_value' => $value,
  );

  if ($value) {
    $element['markup'] = array(
      '#type' => 'markup',
      '#markup' => '**********',
      '#weight' => -10,
    );
  }

  // Prefix and suffix used for Ajax replacement.
  $element['#prefix'] = '<div id="' . $original_id . '-ajax-wrapper">';
  $element['#suffix'] = '</div>';

  // If submitted, set the parent value, unset the text value.
  if (isset($form_state['input'][$element['#name']]) && is_array($form_state['input'][$element['#name']])) {
    $element['#tree'] = FALSE;
    $values_element = $element['#extended'] ? $element['value'] : $element;
    form_set_value($values_element, $value, $form_state);
    $form_state['input'][$element['#name']] = $value;

    unset($element['text']);
  }

  return $element;
}

function obfuscate_textfield_element_value(&$element, $input = FALSE, $form_state = NULL) {
  $value = '';
  $force_default = FALSE;

  // Process any input.
  if ($input !== FALSE && isset($input['text'])) {
    return  $input['text'];
  }

  // If there is no input or if the default value was requested above, use the
  // default value.
  if ($input === FALSE || $force_default) {
    if ($element['#extended']) {
      $value = isset($element['#default_value']['value']) ? $element['#default_value']['value'] : '';
    }
    else {
      if (is_array($element['#default_value']) && isset($element['#default_value']['text'])) {
        $value = $element['#default_value']['text'];
      }
      else {
        $value = $element['#default_value'];
      }
    }
  }


  return $value;
}

function obfuscate_textfield_element_pre_render($element) {
  // If we already have a value, we don't want to show the texfield.
  if (!empty($element['#value'])) {
    $element['text']['#access'] = FALSE;
  }
  // If we don't already have a value, don't show the markup.
  else {
    if (isset($element['display_value'])) {
      $element['display_value']['#access'] = FALSE;
    }

    $element['change_button']['#access'] = FALSE;
  }
  return $element;
}

function obfuscate_textfield_element_validate($element, &$form_state) {

}

function obfuscate_textfield_element_submit($form, &$form_state) {
  // Determine if changed button was clicked,
  // and set $element to the managed_file element that contains that button.
  $parents = $form_state['triggering_element']['#array_parents'];
  $button_key = array_pop($parents);
  $element = drupal_array_get_nested_value($form, $parents);

  // Action is needed here for the change button, because we remove
  // the field value if the change button was clicked.
  if ($button_key == 'change_button') {

    // Update both $form_state['values'] and $form_state['input'] to reflect
    // that the value has been removed, so that the form is rebuilt correctly.
    // $form_state['values'] must be updated in case additional submit handlers
    // run, and for form building functions that run during the rebuild.
    // $form_state['input'] must be updated so that obfuscate_textfield_element_value()
    // has correct information during the rebuild.
    $values_element = $element['#extended'] ? $element['value'] : $element;
    form_set_value($values_element, NULL, $form_state);
    drupal_array_set_nested_value($form_state['input'], $values_element['#parents'], NULL);
  }

  // Set the form to rebuild so that $form is correctly rebuilt.
  $form_state['rebuild'] = TRUE;
}
